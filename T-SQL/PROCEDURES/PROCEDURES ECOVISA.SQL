/*
	ARCHIVO DE CREACION DE PROCEDIMIENTOS ALMACENADOS
	1.- 21/01/2025	BROSALES	-CREACION DEL ARCHIVO
	2.- 21/01/2025	BROSALES	-CREATE PCDINSERTAR_CARGO
								-CREATE PCDINSERTAR_DEPARTAMENTO
								-CREATE PCDINSERTAR_EMPLEADO
								-CREATE PCDINSERTAR_SUCURSAL
								-CREATE PCDINSERTAR_SUCURSAL_EMPLEADO
								-CREATE PCDINSERTAR_GRUPO
								-CREATE PCDINSERTAR_USUARIO
								-CREATE PCDVALIDAR_USUARIO
								-CREATE PCDINSERTAR_MENU
								-CREATE PCDLISTARMENUS
	3.- 07/02/2025	BROSALES    -SE CREA PCDACTUALIZAR_EMPLEADO
								-SE MODIFICA EL PROCEDIMIENTO PCDINSERTAR_EMPLEADO AGREGANDO INSERT DIRECTO A TABLA HISTORIAL TBLSUCURSAL_EMPLEADO E INGRESO DEL CAMPO TELEFONO
								-SE CREA EL PROCEDIMIENTO PCDINSERTAR_SUCURSAL
								-SE CREA EL PCDCONSULTAR_EMPLEADO
	4.- 10/02/2025	BROSALES	-SE AGREGA VALIDACION A LA CONSULTA SOBRE CEDULA UNICA EN PCDACTUALIZAR_CEDULA
	
	5.- 14/02/2025  BROSALES    -SE CREA EL PCDELIMINAR_EMPLEADO
								-SE CREA EL PCDCONSULTARHISTORIAL_EMPLEADO
								-SE MODIFICA PCDVALIDAR_USUARIO PARA RECUPERAR LA SUCURSAL ACTUAL DEL USUARIO
								-SE CREA PCDCAMBIAR_CONTRASENA
								-SE CREA PCDVALIDAR_CONTRASENA_ACTUAL PARA VALIDAR LA CONTRASEÑA ACTUAL DEL USUARIO ANTES DE REALIZAR EL CAMBIO/ACT
	6.- 17/02/2025	BROSALES	-SE CREA EL PROCEDIMIENTO [PCDCONSULTAR_DEPARTAMENTO] PARA CONSULTAR UN DEPARTAMENTO ESPECIFICO 

	7.- 18/02/2025  BROSALES	-SE CREA EL PCD PCDELIMINAR_DEPARTAMENTO 
								-SE CREA EL PCD PCDACTUALIZAR_DEPARTAMENTO

*/
USE ECOVISA_EXE;

CREATE OR ALTER PROCEDURE [dbo].[PCDINSERTAR_CARGO] (@strDescripcion VARCHAR(100))
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLCARGO WHERE TRIM(UPPER(DESCRIPCION)) = TRIM(UPPER(@strDescripcion));
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otro CARGO asociado a la descripción ingresada.', 11, 1);
			END
			INSERT INTO TBLCARGO(ID, DESCRIPCION, ESTADO)
			VALUES((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLCARGO), @strDescripcion, 1)
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO


CREATE OR ALTER PROCEDURE [dbo].[PCDINSERTAR_DEPARTAMENTO] (@strDescripcion VARCHAR(100))
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLDEPARTAMENTO WHERE TRIM(UPPER(DESCRIPCION)) = TRIM(UPPER(@strDescripcion));
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otro DEPARTAMENTO asociado a la descripción ingresada.', 11, 1);
			END
			INSERT INTO TBLDEPARTAMENTO(ID, DESCRIPCION, ESTADO)
			VALUES((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLDEPARTAMENTO), @strDescripcion, 1)
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO

CREATE OR ALTER PROCEDURE [dbo].[PCDCONSULTAR_DEPARTAMENTO](@intIdDepartamento INT)
AS
BEGIN
	SELECT * FROM VWLISTAR_DEPARTAMENTOS WHERE ID = @intIdDepartamento;
END
GO

CREATE OR ALTER PROCEDURE PCDACTUALIZAR_DEPARTAMENTO(@intIdDepartamento INT, @strDescripcion VARCHAR(100), @boolEstado BIT)
AS 
BEGIN
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLDEPARTAMENTO WHERE TRIM(UPPER(DESCRIPCION)) = TRIM(UPPER(@strDescripcion)) AND ID <> @intIdDepartamento;
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otro departamento asociado a la descripción ingresada.', 11, 1);
			END
			UPDATE TBLDEPARTAMENTO SET DESCRIPCION = @strDescripcion, ESTADO = @boolEstado WHERE ID = @intIdDepartamento;
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	END CATCH
END
GO

CREATE OR ALTER PROCEDURE PCDELIMINAR_DEPARTAMENTO (@intIdDepartamento INT)
AS 
BEGIN 
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM TBLDEPARTAMENTO WHERE ID = @intIdDepartamento;
		COMMIT;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE  @ErrorNumber INT = ERROR_NUMBER(),
			@Message varchar(MAX),-- = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		IF @ErrorNumber = 547
		BEGIN
			SET @Message = 'El departamento tiene registros asociados.';
		END
		ELSE
		BEGIN 
			SET @Message = ERROR_MESSAGE();
		END
			RAISERROR (@Message, @Severity, @State);
	END CATCH
END;
GO

CREATE PROCEDURE PCDINSERTAR_SUCURSAL (@strNombre VARCHAR(100), @strDireccion VARCHAR(300))
AS 
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO TBLSUCURSAL (ID, NOMBRE, DIRECCION, ESTADO)
			VALUES ((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID) + 1 END FROM TBLSUCURSAL), @strNombre, @strDireccion, 1)
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	END CATCH
END




CREATE OR ALTER PROCEDURE [dbo].[PCDCONSULTARHISTORIAL_EMPLEADO](@intIdEmpleado INT)
AS
BEGIN
	SELECT IDSUCURSAL, SUCURSAL.NOMBRE SUCURSAL, IDEMPLEADO, EMPLEADO.PRIMER_NOMBRE + ' ' + EMPLEADO.SEGUNDO_NOMBRE + ' ' + EMPLEADO.PRIMER_APELLIDO + ' ' + EMPLEADO.SEGUNDO_APELLIDO TRABAJADOR, 
	FORMAT(FECHA_INGRESO, 'dd/MM/yyyy HH:MM') FECHA, HISTORICO.ESTADO FROM TBLSUCURSAL_EMPLEADO HISTORICO 
	INNER JOIN TBLSUCURSAL SUCURSAL ON HISTORICO.IDSUCURSAL = SUCURSAL.ID
	INNER JOIN TBLEMPLEADO EMPLEADO ON EMPLEADO.ID = HISTORICO.IDEMPLEADO
	WHERE IDEMPLEADO = @intIdEmpleado AND HISTORICO.ESTADO LIKE '%';

END
GO


CREATE OR ALTER PROCEDURE [dbo].[PCDINSERTAR_EMPLEADO] (@strPrimerNombre VARCHAR(50), @strSegundoNombre VARCHAR(50), @strPrimerApellido VARCHAR(50), @strSegundoApellido VARCHAR(50), @strCedula VARCHAR(15), @strDomicilio VARCHAR(300), @intTelefono INT, @strCorreo VARCHAR(100), @intIdDepartamento INT, @intIdCargo INT, @intIdSucursal INT)
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLEMPLEADO WHERE TRIM(UPPER(CEDULA)) = TRIM(UPPER(@strCedula));
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otro trabajador asociado a la cédula ingresada.', 11, 1);
			END
			INSERT INTO TBLEMPLEADO(ID, PRIMER_NOMBRE, SEGUNDO_NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CEDULA, DOMICILIO, TELEFONO, CORREO_ELECTRONICO, ESTADO, IDDEPARTAMENTO_LABORAL,IDCARGO)
			VALUES ((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID) + 1 END FROM TBLEMPLEADO), @strPrimerNombre, @strSegundoNombre, @strPrimerApellido, @strSegundoApellido, @strCedula, @strDomicilio, CASE WHEN @intTelefono = 0 THEN NULL ELSE @intTelefono END, @strCorreo, 1, @intIdDepartamento, @intIdCargo);
			
			INSERT INTO TBLSUCURSAL_EMPLEADO (IDSUCURSAL, IDEMPLEADO, FECHA_INGRESO, ESTADO) VALUES(@intIdSucursal, (SELECT MAX(ID) FROM TBLEMPLEADO), GETDATE(), 1);		
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		 /*INSERT INTO dbo.DB_Errors
			VALUES
		  (SUSER_SNAME(),
		   ERROR_NUMBER(),
		   ERROR_STATE(),
		   ERROR_SEVERITY(),
		   ERROR_LINE(),
		   ERROR_PROCEDURE(),
		   ERROR_MESSAGE(),
		   GETDATE());*/		
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
		--RAISERROR(ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE());

	 END CATCH
END;
GO


CREATE OR ALTER PROCEDURE [dbo].[PCDACTUALIZAR_EMPLEADO] (@intIdEmpleado INT, @strPrimerNombre VARCHAR(50), @strSegundoNombre VARCHAR(50), @strPrimerApellido VARCHAR(50), @strSegundoApellido VARCHAR(50), @strCedula VARCHAR(15), @strDomicilio VARCHAR(300), @intTelefono INT, @strCorreo VARCHAR(100), @intIdDepartamento INT, @intIdCargo INT, @boolEstado BIT, @intIdSucursal INT)
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLEMPLEADO WHERE TRIM(UPPER(CEDULA)) = TRIM(UPPER(@strCedula)) AND ID <> @intIdEmpleado ;
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otro trabajador asociado a la cédula ingresada.', 11, 1);
			END


			--SELECT @intId = COUNT(ID) FROM TBLEMPLEADO WHERE ID = @intIdEmpleado
			IF @boolEstado = 1 
			BEGIN

				IF (SELECT COUNT(IDEMPLEADO) FROM TBLSUCURSAL_EMPLEADO WHERE IDEMPLEADO = @intIdEmpleado AND IDSUCURSAL = @intIdSucursal AND ESTADO = 1) > 0 
				BEGIN
					UPDATE TBLEMPLEADO 
					SET PRIMER_NOMBRE =  @strPrimerNombre, SEGUNDO_NOMBRE =@strSegundoNombre, PRIMER_APELLIDO = @strPrimerApellido,
					SEGUNDO_APELLIDO = @strSegundoApellido, CEDULA = @strCedula, DOMICILIO = @strDomicilio, TELEFONO = (CASE WHEN @intTelefono = 0 THEN NULL ELSE @intTelefono END),
					CORREO_ELECTRONICO = @strCorreo, ESTADO = @boolEstado, IDDEPARTAMENTO_LABORAL = @intIdDepartamento, IDCARGO = @intIdCargo
					WHERE ID = @intIdEmpleado;
				END
				ELSE 
				BEGIN
					UPDATE TBLEMPLEADO 
					SET PRIMER_NOMBRE =  @strPrimerNombre, SEGUNDO_NOMBRE =@strSegundoNombre, PRIMER_APELLIDO = @strPrimerApellido,
					SEGUNDO_APELLIDO = @strSegundoApellido, CEDULA = @strCedula, DOMICILIO = @strDomicilio, TELEFONO = (CASE WHEN @intTelefono = 0 THEN NULL ELSE @intTelefono END),
					CORREO_ELECTRONICO = @strCorreo, ESTADO = @boolEstado, IDDEPARTAMENTO_LABORAL = @intIdDepartamento, IDCARGO = @intIdCargo
					WHERE ID = @intIdEmpleado;

					UPDATE TBLSUCURSAL_EMPLEADO
					SET ESTADO = 0
					WHERE IDEMPLEADO = @intIdEmpleado AND ESTADO = 1 AND 
					FECHA_INGRESO = (SELECT MAX(FECHA_INGRESO) FROM TBLSUCURSAL_EMPLEADO WHERE IDEMPLEADO = @intIdEmpleado);

					INSERT INTO TBLSUCURSAL_EMPLEADO (IDSUCURSAL, IDEMPLEADO, FECHA_INGRESO, ESTADO) VALUES(@intIdSucursal, @intIdEmpleado, GETDATE(), 1);	
				END
			END
			ELSE 
			BEGIN
				UPDATE TBLEMPLEADO 
				SET PRIMER_NOMBRE =  @strPrimerNombre, SEGUNDO_NOMBRE =@strSegundoNombre, PRIMER_APELLIDO = @strPrimerApellido,
				SEGUNDO_APELLIDO = @strSegundoApellido, CEDULA = @strCedula, DOMICILIO = @strDomicilio, TELEFONO = (CASE WHEN @intTelefono = 0 THEN NULL ELSE @intTelefono END),
				CORREO_ELECTRONICO = @strCorreo, ESTADO = @boolEstado, IDDEPARTAMENTO_LABORAL = @intIdDepartamento, IDCARGO = @intIdCargo
				WHERE ID = @intIdEmpleado;

				UPDATE TBLSUCURSAL_EMPLEADO
				SET ESTADO = 0
				WHERE IDEMPLEADO = @intIdEmpleado AND IDSUCURSAL = @intIdSucursal AND 
				FECHA_INGRESO = (SELECT MAX(FECHA_INGRESO) FROM TBLSUCURSAL_EMPLEADO WHERE IDEMPLEADO = @intIdEmpleado);
			END
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
		--RAISERROR(ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE());

	 END CATCH
END;
GO


CREATE OR ALTER PROCEDURE PCDELIMINAR_EMPLEADO (@intIdEmpleado INT)
AS 
BEGIN 
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM TBLEMPLEADO WHERE ID = @intIdEmpleado;
		COMMIT;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE  @ErrorNumber INT = ERROR_NUMBER(),
			@Message varchar(MAX),-- = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		IF @ErrorNumber = 547
		BEGIN
			SET @Message = 'El trabajador tiene registros asociados.';
		END
		ELSE
		BEGIN 
			SET @Message = ERROR_MESSAGE();
		END
			RAISERROR (@Message, @Severity, @State);
	END CATCH
END;
GO


CREATE OR ALTER PROCEDURE [dbo].[PCDCONSULTAR_EMPLEADO](@intIdEmpleado INT)
AS
BEGIN
	SELECT ID, PRIMER_NOMBRE, SEGUNDO_NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CEDULA, DOMICILIO, TELEFONO, CORREO_ELECTRONICO, ESTADO, 
	IDDEPARTAMENTO_LABORAL, IDCARGO, (SELECT IDSUCURSAL FROM TBLSUCURSAL_EMPLEADO WHERE IDEMPLEADO =  @intIdEmpleado AND ESTADO = 1) SUCURSAL FROM (SELECT * FROM TBLEMPLEADO WHERE ID = @intIdEmpleado) EMPLEADO;
END
GO

CREATE OR ALTER PROCEDURE [dbo].[PCDINSERTAR_SUCURSAL] (@strNombre VARCHAR(100), @strDireccion VARCHAR(300))
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLSUCURSAL WHERE TRIM(UPPER(NOMBRE)) = TRIM(UPPER(@strNombre));
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otra SUCURSAL asociada al nombre ingresado.', 11, 1);
			END
			INSERT INTO TBLSUCURSAL(ID, NOMBRE, DIRECCION, ESTADO)
			VALUES((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLSUCURSAL), @strNombre, @strDireccion, 1)
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO


CREATE PROCEDURE [dbo].[PCDINSERTAR_SUCURSAL_EMPLEADO] (@intIdSucursal INTEGER, @intIdEmpleado INTEGER)
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			INSERT INTO TBLSUCURSAL_EMPLEADO(IDSUCURSAL, IDEMPLEADO, FECHA_INGRESO)
			VALUES(@intIdSucursal, @intIdEmpleado, FORMAT(GETDATE(), 'dd/MM/yyyy'))
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO

CREATE OR ALTER PROCEDURE [dbo].[PCDINSERTAR_GRUPO] (@strDescripcion VARCHAR(100))
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLGRUPO WHERE TRIM(UPPER(DESCRIPCION)) = TRIM(UPPER(@strDescripcion));
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otro GRUPO asociado a la descripción ingresada.', 11, 1);
			END
			INSERT INTO TBLGRUPO(ID, DESCRIPCION, ESTADO)
			VALUES((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLGRUPO), @strDescripcion, 1)
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO



CREATE OR ALTER PROCEDURE [dbo].[PCDINSERTAR_USUARIO](@strNombreUsuario VARCHAR(200), @strUsuario VARCHAR(30), @strContrasena VARCHAR(100), @intIdEmpleado INT, @intIdGrupo INT)
AS
BEGIN 
	DECLARE @intId INT,
		@intIdInsert INT;
	BEGIN TRY
		SET @intIdInsert = 1;
		BEGIN TRANSACTION 
		SELECT @intId  = COUNT(ID) FROM TBLUSUARIO WHERE TRIM(UPPER(USUARIO)) = TRIM(UPPER(@strUsuario));
		IF @intId > 0 
		BEGIN
			RAISERROR('Se encontró otra cuenta de usuario con la misma credencial usuario.', 11, 1);
		END
		INSERT INTO TBLUSUARIO(ID, NOMBREUSUARIO, USUARIO, CONTRASENA, CORREO_ELECTRONICO, ESTADO, IDEMPLEADO, IDGRUPO)
		VALUES ((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE @intIdInsert END FROM TBLUSUARIO), @strNombreUsuario, @strUsuario, @strContrasena, (SELECT CORREO_ELECTRONICO FROM TBLEMPLEADO WHERE ID = @intIdEmpleado), 1, @intIdEmpleado, @intIdGrupo);
		COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO


CREATE OR ALTER PROCEDURE [dbo].[PCDCAMBIAR_CONTRASENA](@intIdUsuario VARCHAR(200), @strNuevaContrasena VARCHAR(100))
AS
BEGIN 
	BEGIN TRY		
		BEGIN TRANSACTION 
		UPDATE TBLUSUARIO SET CONTRASENA = @strNuevaContrasena WHERE ID = @intIdUsuario;
		COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO



CREATE OR ALTER PROCEDURE [dbo].PCDVALIDAR_CONTRASENA_ACTUAL(@intIdUsuario INT, @strContrasena VARCHAR(100))
AS
BEGIN
	SELECT ID, NOMBREUSUARIO, USUARIO, CORREO_ELECTRONICO, ESTADO, IDEMPLEADO, IDGRUPO
	FROM TBLUSUARIO WHERE ID = @intIdUsuario AND CONTRASENA = @strContrasena;
END;
GO


CREATE OR ALTER PROCEDURE [dbo].[PCDVALIDAR_USUARIO](@strUsuario VARCHAR(30), @strContrasena VARCHAR(100))
AS
BEGIN
	--SELECT * FROM TBLUSUARIO WHERE TRIM(UPPER(USUARIO)) = TRIM(UPPER(@strUsuario)) AND CONTRASENA = @strContrasena;
	SELECT ID, NOMBREUSUARIO, USUARIO, CONTRASENA, CORREO_ELECTRONICO, USUARIO.ESTADO, USUARIO.IDEMPLEADO, IDGRUPO, IDSUCURSAL, HISTORICO.ESTADO ESTADOHIST
	FROM TBLUSUARIO USUARIO INNER JOIN TBLSUCURSAL_EMPLEADO HISTORICO ON HISTORICO.IDEMPLEADO = USUARIO.IDEMPLEADO WHERE USUARIO.ESTADO = 1 AND HISTORICO.ESTADO = 1
	AND TRIM(UPPER(USUARIO)) = TRIM(UPPER(@strUsuario)) AND CONTRASENA = @strContrasena;


END;
GO


CREATE PROCEDURE [dbo].[PCDINSERTAR_MENU] (@strNombre VARCHAR(200), @strUbicacion VARCHAR(500), @intIdPadre INTEGER)
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			IF @strUbicacion IS NOT NULL  
				SELECT @intId  = COUNT(ID) FROM TBLMENU WHERE TRIM(UPPER(UBICACION)) = TRIM(UPPER(@strUbicacion));
				IF @intId > 0 
				BEGIN
					RAISERROR('Se encontró otro MENÚ asociado a la URL ingresada.', 11, 1);
				END			
			INSERT INTO TBLMENU(ID, NOMBREMENU, UBICACION, POSICION, IDPADRE)
			VALUES((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLMENU), @strNombre, (SELECT CASE WHEN @strUbicacion IS NULL THEN '' ELSE @strUbicacion END),						
			(SELECT CASE WHEN @intIdPadre = 0 THEN
							CASE WHEN (SELECT MAX(POSICION) FROM TBLMENU  WHERE ID = IDPADRE) IS NULL THEN 1 
									ELSE (SELECT MAX(POSICION) FROM TBLMENU  WHERE ID = IDPADRE)+1 END
									
				ELSE (SELECT CASE WHEN (SELECT MAX(POSICION) FROM TBLMENU  WHERE ID <> IDPADRE AND IDPADRE = @intIdPadre) IS NULL THEN 1 ELSE (SELECT MAX(POSICION) FROM TBLMENU  WHERE ID <> IDPADRE AND IDPADRE = @intIdPadre)+1 END) 
			END),
			(SELECT CASE WHEN @intIdPadre = 0 THEN 
						(SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLMENU) 
					ELSE @intIdPadre END))
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO


CREATE PROCEDURE [dbo].[PCDLISTARMENUS] AS
BEGIN
		WITH TBLAUX AS
		(		SELECT ID, NOMBREMENU, UBICACION, POSICION, 0 AS IDPADRE,
					(SELECT NOMBREMENU FROM TBLMENU PADRE WHERE PADRE.ID = MENU.IDPADRE) PADRE,
					0 AS NIVEL,
					0 AS HIJO
				FROM TBLMENU MENU WHERE ID = IDPADRE
			UNION ALL
				SELECT MENU.*, TBLPADRE.NIVEL + 1 AS NIVEL, CASE WHEN EXISTS(SELECT 1 FROM TBLMENU HIJO WHERE HIJO.ID = MENU.IDPADRE)  THEN 1 ELSE 0 END AS HIJO
				FROM 
				(
					SELECT MENU.*, (SELECT NOMBREMENU FROM TBLMENU PADRE WHERE PADRE.ID = MENU.IDPADRE) PADRE
					FROM TBLMENU MENU WHERE ID <> IDPADRE AND UBICACION IS NOT NULL
				)MENU
				INNER JOIN TBLAUX TBLPADRE  ON MENU.IDPADRE = TBLPADRE.ID
		)SELECT * FROM TBLAUX ORDER BY POSICION;

END;
GO


