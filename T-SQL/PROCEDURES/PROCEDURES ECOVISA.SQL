/*
	ARCHIVO DE CREACION DE PROCEDIMIENTOS ALMACENADOS
	1.- 21/01/2025	BROSALES	-CREACION DEL ARCHIVO
	2.- 21/01/2025	BROSALES	-CREATE PCDINSERTAR_CARGO
								-CREATE PCDINSERTAR_DEPARTAMENTO
								-CREATE PCDINSERTAR_EMPLEADO
								-CREATE PCDINSERTAR_SUCURSAL
								-CREATE PCDINSERTAR_SUCURSAL_EMPLEADO
								-CREATE PCDINSERTAR_GRUPO
								-CREATE PCDINSERTAR_USUARIO
								-CREATE PCDVALIDAR_USUARIO
								-CREATE PCDINSERTAR_MENU
								-CREATE PCDLISTARMENUS
*/
USE ECOVISA;

CREATE PROCEDURE [dbo].[PCDINSERTAR_CARGO] (@strDescripcion VARCHAR(100))
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLCARGO WHERE TRIM(UPPER(DESCRIPCION)) = TRIM(UPPER(@strDescripcion));
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otro CARGO asociado a la descripción ingresada.', 11, 1);
			END
			INSERT INTO TBLCARGO(ID, DESCRIPCION, ESTADO)
			VALUES((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLCARGO), @strDescripcion, 1)
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO


CREATE PROCEDURE [dbo].[PCDINSERTAR_DEPARTAMENTO] (@strDescripcion VARCHAR(100))
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLDEPARTAMENTO WHERE TRIM(UPPER(DESCRIPCION)) = TRIM(UPPER(@strDescripcion));
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otro DEPARTAMENTO asociado a la descripción ingresada.', 11, 1);
			END
			INSERT INTO TBLDEPARTAMENTO(ID, DESCRIPCION, ESTADO)
			VALUES((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLDEPARTAMENTO), @strDescripcion, 1)
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO


CREATE PROCEDURE [dbo].[PCDINSERTAR_EMPLEADO] (@strPrimerNombre VARCHAR(50), @strSegundoNombre VARCHAR(50), @strPrimerApellido VARCHAR(50), @strSegundoApellido VARCHAR(50), @strCedula VARCHAR(15), @strDomicilio VARCHAR(300), @intTelefono INT, @strCorreo VARCHAR(100), @intIdDepartamento INT, @intIdCargo INT)
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLEMPLEADO WHERE TRIM(UPPER(CEDULA)) = TRIM(UPPER(@strCedula));
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otro trabajador asociado a la cédula ingresada.', 11, 1);
			END
			INSERT INTO TBLEMPLEADO(ID, PRIMER_NOMBRE, SEGUNDO_NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CEDULA, DOMICILIO, TELEFONO, CORREO_ELECTRONICO, ESTADO, IDDEPARTAMENTO_LABORAL,IDCARGO)
			VALUES ((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID) + 1 END FROM TBLEMPLEADO), @strPrimerNombre, @strSegundoNombre, @strPrimerApellido, @strSegundoApellido, @strCedula, @strDomicilio, @intTelefono, @strCorreo, 1, @intIdDepartamento, @intIdCargo);
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		 /*INSERT INTO dbo.DB_Errors
			VALUES
		  (SUSER_SNAME(),
		   ERROR_NUMBER(),
		   ERROR_STATE(),
		   ERROR_SEVERITY(),
		   ERROR_LINE(),
		   ERROR_PROCEDURE(),
		   ERROR_MESSAGE(),
		   GETDATE());*/		
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
		--RAISERROR(ERROR_MESSAGE(), ERROR_SEVERITY(), ERROR_STATE());

	 END CATCH
END;
GO



CREATE PROCEDURE [dbo].[PCDINSERTAR_SUCURSAL] (@strNombre VARCHAR(100), @strDireccion VARCHAR(300))
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLSUCURSAL WHERE TRIM(UPPER(NOMBRE)) = TRIM(UPPER(@strNombre));
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otra SUCURSAL asociada al nombre ingresado.', 11, 1);
			END
			INSERT INTO TBLSUCURSAL(ID, NOMBRE, DIRECCION, ESTADO)
			VALUES((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLSUCURSAL), @strNombre, @strDireccion, 1)
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO


CREATE PROCEDURE [dbo].[PCDINSERTAR_SUCURSAL_EMPLEADO] (@intIdSucursal INTEGER, @intIdEmpleado INTEGER)
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			INSERT INTO TBLSUCURSAL_EMPLEADO(IDSUCURSAL, IDEMPLEADO, FECHA_INGRESO)
			VALUES(@intIdSucursal, @intIdEmpleado, FORMAT(GETDATE(), 'dd/MM/yyyy'))
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO

CREATE PROCEDURE [dbo].[PCDINSERTAR_GRUPO] (@strDescripcion VARCHAR(100))
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			SELECT @intId  = COUNT(ID) FROM TBLGRUPO WHERE TRIM(UPPER(DESCRIPCION)) = TRIM(UPPER(@strDescripcion));
			IF @intId > 0 
			BEGIN
				RAISERROR('Se encontró otro GRUPO asociado a la descripción ingresada.', 11, 1);
			END
			INSERT INTO TBLGRUPO(ID, DESCRIPCION, ESTADO)
			VALUES((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLGRUPO), @strDescripcion, 1)
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO



CREATE PROCEDURE [dbo].[PCDINSERTAR_USUARIO](@strNombreUsuario VARCHAR(200), @strUsuario VARCHAR(30), @strContrasena VARCHAR(100), @intIdEmpleado INT, @intIdGrupo INT)
AS
BEGIN 
	DECLARE @intId INT,
		@intIdInsert INT;
	BEGIN TRY
		SET @intIdInsert = 1;
		BEGIN TRANSACTION 
		SELECT @intId  = COUNT(ID) FROM TBLUSUARIO WHERE TRIM(UPPER(USUARIO)) = TRIM(UPPER(@strUsuario));
		IF @intId > 0 
		BEGIN
			RAISERROR('Se encontró otra cuenta de usuario con la misma credencial usuario.', 11, 1);
		END
		INSERT INTO TBLUSUARIO(ID, NOMBREUSUARIO, USUARIO, CONTRASENA, CORREO_ELECTRONICO, ESTADO, IDEMPLEADO, IDGRUPO)
		VALUES ((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE @intIdInsert END FROM TBLUSUARIO), @strNombreUsuario, @strUsuario, @strContrasena, (SELECT CORREO_ELECTRONICO FROM TBLEMPLEADO WHERE ID = @intIdEmpleado), 1, @intIdEmpleado, @intIdGrupo);
		COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO


CREATE PROCEDURE [dbo].[PCDVALIDAR_USUARIO](@strUsuario VARCHAR(30), @strContrasena VARCHAR(100))
AS
BEGIN
	SELECT * FROM TBLUSUARIO WHERE TRIM(UPPER(USUARIO)) = TRIM(UPPER(@strUsuario)) AND CONTRASENA = @strContrasena;
END;
GO


CREATE PROCEDURE [dbo].[PCDINSERTAR_MENU] (@strNombre VARCHAR(200), @strUbicacion VARCHAR(500), @intIdPadre INTEGER)
AS
BEGIN 
	DECLARE @intId INT;
	BEGIN TRY
		BEGIN TRANSACTION 
			IF @strUbicacion IS NOT NULL  
				SELECT @intId  = COUNT(ID) FROM TBLMENU WHERE TRIM(UPPER(UBICACION)) = TRIM(UPPER(@strUbicacion));
				IF @intId > 0 
				BEGIN
					RAISERROR('Se encontró otro MENÚ asociado a la URL ingresada.', 11, 1);
				END			
			INSERT INTO TBLMENU(ID, NOMBREMENU, UBICACION, POSICION, IDPADRE)
			VALUES((SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLMENU), @strNombre, (SELECT CASE WHEN @strUbicacion IS NULL THEN '' ELSE @strUbicacion END),						
			(SELECT CASE WHEN @intIdPadre = 0 THEN
							CASE WHEN (SELECT MAX(POSICION) FROM TBLMENU  WHERE ID = IDPADRE) IS NULL THEN 1 
									ELSE (SELECT MAX(POSICION) FROM TBLMENU  WHERE ID = IDPADRE)+1 END
									
				ELSE (SELECT CASE WHEN (SELECT MAX(POSICION) FROM TBLMENU  WHERE ID <> IDPADRE AND IDPADRE = @intIdPadre) IS NULL THEN 1 ELSE (SELECT MAX(POSICION) FROM TBLMENU  WHERE ID <> IDPADRE AND IDPADRE = @intIdPadre)+1 END) 
			END),
			(SELECT CASE WHEN @intIdPadre = 0 THEN 
						(SELECT CASE WHEN MAX(ID) IS NULL THEN 1 ELSE MAX(ID)+1 END FROM TBLMENU) 
					ELSE @intIdPadre END))
			COMMIT TRANSACTION;
	 END TRY
	 BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRANSACTION;
		END 
		DECLARE @Message varchar(MAX) = ERROR_MESSAGE(),
			@Severity int = ERROR_SEVERITY(),
			@State smallint = ERROR_STATE();
		RAISERROR (@Message, @Severity, @State);
	 END CATCH
END;
GO


CREATE PROCEDURE [dbo].[PCDLISTARMENUS] AS
BEGIN
		WITH TBLAUX AS
		(		SELECT ID, NOMBREMENU, UBICACION, POSICION, 0 AS IDPADRE,
					(SELECT NOMBREMENU FROM TBLMENU PADRE WHERE PADRE.ID = MENU.IDPADRE) PADRE,
					0 AS NIVEL,
					0 AS HIJO
				FROM TBLMENU MENU WHERE ID = IDPADRE
			UNION ALL
				SELECT MENU.*, TBLPADRE.NIVEL + 1 AS NIVEL, CASE WHEN EXISTS(SELECT 1 FROM TBLMENU HIJO WHERE HIJO.ID = MENU.IDPADRE)  THEN 1 ELSE 0 END AS HIJO
				FROM 
				(
					SELECT MENU.*, (SELECT NOMBREMENU FROM TBLMENU PADRE WHERE PADRE.ID = MENU.IDPADRE) PADRE
					FROM TBLMENU MENU WHERE ID <> IDPADRE AND UBICACION IS NOT NULL
				)MENU
				INNER JOIN TBLAUX TBLPADRE  ON MENU.IDPADRE = TBLPADRE.ID
		)SELECT * FROM TBLAUX ORDER BY POSICION;

END;
GO


